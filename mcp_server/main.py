# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:50:46+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query

from models import (
    CreateAppRequest,
    CreateAppResponse,
    CreateReplicationJobRequest,
    CreateReplicationJobResponse,
    DeleteAppLaunchConfigurationRequest,
    DeleteAppLaunchConfigurationResponse,
    DeleteAppReplicationConfigurationRequest,
    DeleteAppReplicationConfigurationResponse,
    DeleteAppRequest,
    DeleteAppResponse,
    DeleteAppValidationConfigurationRequest,
    DeleteAppValidationConfigurationResponse,
    DeleteReplicationJobRequest,
    DeleteReplicationJobResponse,
    DeleteServerCatalogRequest,
    DeleteServerCatalogResponse,
    DisassociateConnectorRequest,
    DisassociateConnectorResponse,
    DryRunOperationException,
    GenerateChangeSetRequest,
    GenerateChangeSetResponse,
    GenerateTemplateRequest,
    GenerateTemplateResponse,
    GetAppLaunchConfigurationRequest,
    GetAppLaunchConfigurationResponse,
    GetAppReplicationConfigurationRequest,
    GetAppReplicationConfigurationResponse,
    GetAppRequest,
    GetAppResponse,
    GetAppValidationConfigurationRequest,
    GetAppValidationConfigurationResponse,
    GetAppValidationOutputRequest,
    GetAppValidationOutputResponse,
    GetConnectorsRequest,
    GetConnectorsResponse,
    GetReplicationJobsRequest,
    GetReplicationJobsResponse,
    GetReplicationRunsRequest,
    GetReplicationRunsResponse,
    GetServersRequest,
    GetServersResponse,
    ImportAppCatalogRequest,
    ImportAppCatalogResponse,
    ImportServerCatalogRequest,
    ImportServerCatalogResponse,
    InternalError,
    InvalidParameterException,
    LaunchAppRequest,
    LaunchAppResponse,
    ListAppsRequest,
    ListAppsResponse,
    MissingRequiredParameterException,
    NoConnectorsAvailableException,
    NotifyAppValidationOutputRequest,
    NotifyAppValidationOutputResponse,
    OperationNotPermittedException,
    PutAppLaunchConfigurationRequest,
    PutAppLaunchConfigurationResponse,
    PutAppReplicationConfigurationRequest,
    PutAppReplicationConfigurationResponse,
    PutAppValidationConfigurationRequest,
    PutAppValidationConfigurationResponse,
    ReplicationJobAlreadyExistsException,
    ReplicationJobNotFoundException,
    ReplicationRunLimitExceededException,
    ServerCannotBeReplicatedException,
    StartAppReplicationRequest,
    StartAppReplicationResponse,
    StartOnDemandAppReplicationRequest,
    StartOnDemandAppReplicationResponse,
    StartOnDemandReplicationRunRequest,
    StartOnDemandReplicationRunResponse,
    StopAppReplicationRequest,
    StopAppReplicationResponse,
    TemporarilyUnavailableException,
    TerminateAppRequest,
    TerminateAppResponse,
    UnauthorizedOperationException,
    UpdateAppRequest,
    UpdateAppResponse,
    UpdateReplicationJobRequest,
    UpdateReplicationJobResponse,
    XAmzTarget,
    XAmzTarget1,
    XAmzTarget2,
    XAmzTarget3,
    XAmzTarget4,
    XAmzTarget5,
    XAmzTarget6,
    XAmzTarget7,
    XAmzTarget8,
    XAmzTarget9,
    XAmzTarget10,
    XAmzTarget11,
    XAmzTarget12,
    XAmzTarget13,
    XAmzTarget14,
    XAmzTarget15,
    XAmzTarget16,
    XAmzTarget17,
    XAmzTarget18,
    XAmzTarget19,
    XAmzTarget20,
    XAmzTarget21,
    XAmzTarget22,
    XAmzTarget23,
    XAmzTarget24,
    XAmzTarget25,
    XAmzTarget26,
    XAmzTarget27,
    XAmzTarget28,
    XAmzTarget29,
    XAmzTarget30,
    XAmzTarget31,
    XAmzTarget32,
    XAmzTarget33,
    XAmzTarget34,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='<important> <p> <b>Product update</b> </p> <p>We recommend <a href="http://aws.amazon.com/application-migration-service">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href="http://aws.amazon.com/server-migration-service/">Server Migration Service product page</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/server-migration-service/latest/userguide/">Server Migration Service User Guide</a> </p> </li> </ul>',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='AWS Server Migration Service',
    version='2016-10-24',
    servers=[
        {
            'description': 'The SMS multi-region endpoint',
            'url': 'http://sms.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The SMS multi-region endpoint',
            'url': 'https://sms.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The SMS endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://sms.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The SMS endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://sms.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateApp',
    description=""" Creates an application. An application consists of one or more server groups. Each server group contain one or more servers. """,
    tags=['app_management', 'change_set_creation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_app(
    x__amz__target: XAmzTarget = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateAppRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateReplicationJob',
    description=""" Creates a replication job. The replication job schedules periodic replication runs to replicate your server to Amazon Web Services. Each replication run creates an Amazon Machine Image (AMI). """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_replication_job(
    x__amz__target: XAmzTarget1 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateReplicationJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteApp',
    description=""" Deletes the specified application. Optionally deletes the launched stack associated with the application and all Server Migration Service replication jobs for servers in the application. """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_app(
    x__amz__target: XAmzTarget2 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteAppRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppLaunchConfiguration',
    description=""" Deletes the launch configuration for the specified application. """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_app_launch_configuration(
    x__amz__target: XAmzTarget3 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteAppLaunchConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppReplicationConfiguration',
    description=""" Deletes the replication configuration for the specified application. """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_app_replication_configuration(
    x__amz__target: XAmzTarget4 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteAppReplicationConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppValidationConfiguration',
    description=""" Deletes the validation configuration for the specified application. """,
    tags=['app_configuration_validation', 'replication_job_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_app_validation_configuration(
    x__amz__target: XAmzTarget5 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteAppValidationConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteReplicationJob',
    description=""" <p>Deletes the specified replication job.</p> <p>After you delete a replication job, there are no further replication runs. Amazon Web Services deletes the contents of the Amazon S3 bucket used to store Server Migration Service artifacts. The AMIs created by the replication runs are not deleted.</p> """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_replication_job(
    x__amz__target: XAmzTarget6 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteReplicationJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteServerCatalog',
    description=""" Deletes all servers from your server catalog. """,
    tags=['server_inventory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_server_catalog(
    x__amz__target: XAmzTarget7 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteServerCatalogRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DisassociateConnector',
    description=""" <p>Disassociates the specified connector from Server Migration Service.</p> <p>After you disassociate a connector, it is no longer available to support replication jobs.</p> """,
    tags=['connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_connector(
    x__amz__target: XAmzTarget8 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DisassociateConnectorRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateChangeSet',
    description=""" Generates a target change set for a currently launched stack and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket. """,
    tags=['change_set_creation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def generate_change_set(
    x__amz__target: XAmzTarget9 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GenerateChangeSetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateTemplate',
    description=""" Generates an CloudFormation template based on the current launch configuration and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket. """,
    tags=['change_set_creation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def generate_template(
    x__amz__target: XAmzTarget10 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GenerateTemplateRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetApp',
    description=""" Retrieve information about the specified application. """,
    tags=['app_management', 'app_configuration_validation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_app(
    x__amz__target: XAmzTarget11 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GetAppRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppLaunchConfiguration',
    description=""" Retrieves the application launch configuration associated with the specified application. """,
    tags=['app_configuration_validation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_app_launch_configuration(
    x__amz__target: XAmzTarget12 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GetAppLaunchConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppReplicationConfiguration',
    description=""" Retrieves the application replication configuration associated with the specified application. """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_app_replication_configuration(
    x__amz__target: XAmzTarget13 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GetAppReplicationConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppValidationConfiguration',
    description=""" Retrieves information about a configuration for validating an application. """,
    tags=['app_configuration_validation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_app_validation_configuration(
    x__amz__target: XAmzTarget14 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GetAppValidationConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppValidationOutput',
    description=""" Retrieves output from validating an application. """,
    tags=['app_configuration_validation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_app_validation_output(
    x__amz__target: XAmzTarget15 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GetAppValidationOutputRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetConnectors',
    description=""" Describes the connectors registered with the Server Migration Service. """,
    tags=['connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_connectors(
    max_results: Optional[str] = Query(None, alias='maxResults'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    x__amz__target: XAmzTarget16 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GetConnectorsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationJobs',
    description=""" Describes the specified replication job or all of your replication jobs. """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_replication_jobs(
    max_results: Optional[str] = Query(None, alias='maxResults'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    x__amz__target: XAmzTarget17 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GetReplicationJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationRuns',
    description=""" Describes the replication runs for the specified replication job. """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_replication_runs(
    max_results: Optional[str] = Query(None, alias='maxResults'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    x__amz__target: XAmzTarget18 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GetReplicationRunsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetServers',
    description=""" <p>Describes the servers in your server catalog.</p> <p>Before you can describe your servers, you must import them using <a>ImportServerCatalog</a>.</p> """,
    tags=['server_inventory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_servers(
    max_results: Optional[str] = Query(None, alias='maxResults'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    x__amz__target: XAmzTarget19 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GetServersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportAppCatalog',
    description=""" Allows application import from Migration Hub. """,
    tags=['app_management', 'server_inventory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def import_app_catalog(
    x__amz__target: XAmzTarget20 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ImportAppCatalogRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportServerCatalog',
    description=""" <p>Gathers a complete list of on-premises servers. Connectors must be installed and monitoring all servers to import.</p> <p>This call returns immediately, but might take additional time to retrieve all the servers.</p> """,
    tags=['server_inventory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def import_server_catalog(
    x__amz__target: XAmzTarget21 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ImportServerCatalogRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.LaunchApp',
    description=""" Launches the specified application as a stack in CloudFormation. """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def launch_app(
    x__amz__target: XAmzTarget22 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: LaunchAppRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ListApps',
    description=""" Retrieves summaries for all applications. """,
    tags=['app_configuration_validation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_apps(
    x__amz__target: XAmzTarget23 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListAppsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.NotifyAppValidationOutput',
    description=""" Provides information to Server Migration Service about whether application validation is successful. """,
    tags=['app_configuration_validation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def notify_app_validation_output(
    x__amz__target: XAmzTarget24 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: NotifyAppValidationOutputRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppLaunchConfiguration',
    description=""" Creates or updates the launch configuration for the specified application. """,
    tags=['app_configuration_validation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_app_launch_configuration(
    x__amz__target: XAmzTarget25 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PutAppLaunchConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppReplicationConfiguration',
    description=""" Creates or updates the replication configuration for the specified application. """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_app_replication_configuration(
    x__amz__target: XAmzTarget26 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PutAppReplicationConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppValidationConfiguration',
    description=""" Creates or updates a validation configuration for the specified application. """,
    tags=['app_configuration_validation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_app_validation_configuration(
    x__amz__target: XAmzTarget27 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PutAppValidationConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartAppReplication',
    description=""" Starts replicating the specified application by creating replication jobs for each server in the application. """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_app_replication(
    x__amz__target: XAmzTarget28 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartAppReplicationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandAppReplication',
    description=""" Starts an on-demand replication run for the specified application. """,
    tags=['replication_process_management', 'replication_job_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_on_demand_app_replication(
    x__amz__target: XAmzTarget29 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartOnDemandAppReplicationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandReplicationRun',
    description=""" <p>Starts an on-demand replication run for the specified replication job. This replication run starts immediately. This replication run is in addition to the ones already scheduled.</p> <p>There is a limit on the number of on-demand replications runs that you can request in a 24-hour period.</p> """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_on_demand_replication_run(
    x__amz__target: XAmzTarget30 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartOnDemandReplicationRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StopAppReplication',
    description=""" Stops replicating the specified application by deleting the replication job for each server in the application. """,
    tags=['replication_process_management', 'replication_job_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_app_replication(
    x__amz__target: XAmzTarget31 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopAppReplicationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.TerminateApp',
    description=""" Terminates the stack for the specified application. """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def terminate_app(
    x__amz__target: XAmzTarget32 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: TerminateAppRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateApp',
    description=""" Updates the specified application. """,
    tags=['app_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_app(
    x__amz__target: XAmzTarget33 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UpdateAppRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateReplicationJob',
    description=""" Updates the specified settings for the specified replication job. """,
    tags=['replication_job_management', 'replication_process_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_replication_job(
    x__amz__target: XAmzTarget34 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UpdateReplicationJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
