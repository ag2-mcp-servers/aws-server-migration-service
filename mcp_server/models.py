# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:50:46+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, RootModel, conint, constr


class AmiId(RootModel[str]):
    root: str


class AppDescription(RootModel[str]):
    root: str


class AppId(RootModel[str]):
    root: str


class AppIdWithValidation(RootModel[constr(pattern=r'^app-[0-9a-f]{17}$')]):
    root: constr(pattern=r'^app-[0-9a-f]{17}$')


class AppIds(RootModel[List[AppId]]):
    root: List[AppId]


class AppLaunchConfigurationStatus(Enum):
    NOT_CONFIGURED = 'NOT_CONFIGURED'
    CONFIGURED = 'CONFIGURED'


class AppLaunchStatus(Enum):
    READY_FOR_CONFIGURATION = 'READY_FOR_CONFIGURATION'
    CONFIGURATION_IN_PROGRESS = 'CONFIGURATION_IN_PROGRESS'
    CONFIGURATION_INVALID = 'CONFIGURATION_INVALID'
    READY_FOR_LAUNCH = 'READY_FOR_LAUNCH'
    VALIDATION_IN_PROGRESS = 'VALIDATION_IN_PROGRESS'
    LAUNCH_PENDING = 'LAUNCH_PENDING'
    LAUNCH_IN_PROGRESS = 'LAUNCH_IN_PROGRESS'
    LAUNCHED = 'LAUNCHED'
    PARTIALLY_LAUNCHED = 'PARTIALLY_LAUNCHED'
    DELTA_LAUNCH_IN_PROGRESS = 'DELTA_LAUNCH_IN_PROGRESS'
    DELTA_LAUNCH_FAILED = 'DELTA_LAUNCH_FAILED'
    LAUNCH_FAILED = 'LAUNCH_FAILED'
    TERMINATE_IN_PROGRESS = 'TERMINATE_IN_PROGRESS'
    TERMINATE_FAILED = 'TERMINATE_FAILED'
    TERMINATED = 'TERMINATED'


class AppLaunchStatusMessage(RootModel[str]):
    root: str


class AppName(RootModel[str]):
    root: str


class AppReplicationConfigurationStatus(Enum):
    NOT_CONFIGURED = 'NOT_CONFIGURED'
    CONFIGURED = 'CONFIGURED'


class AppReplicationStatus(Enum):
    READY_FOR_CONFIGURATION = 'READY_FOR_CONFIGURATION'
    CONFIGURATION_IN_PROGRESS = 'CONFIGURATION_IN_PROGRESS'
    CONFIGURATION_INVALID = 'CONFIGURATION_INVALID'
    READY_FOR_REPLICATION = 'READY_FOR_REPLICATION'
    VALIDATION_IN_PROGRESS = 'VALIDATION_IN_PROGRESS'
    REPLICATION_PENDING = 'REPLICATION_PENDING'
    REPLICATION_IN_PROGRESS = 'REPLICATION_IN_PROGRESS'
    REPLICATED = 'REPLICATED'
    PARTIALLY_REPLICATED = 'PARTIALLY_REPLICATED'
    DELTA_REPLICATION_IN_PROGRESS = 'DELTA_REPLICATION_IN_PROGRESS'
    DELTA_REPLICATED = 'DELTA_REPLICATED'
    DELTA_REPLICATION_FAILED = 'DELTA_REPLICATION_FAILED'
    REPLICATION_FAILED = 'REPLICATION_FAILED'
    REPLICATION_STOPPING = 'REPLICATION_STOPPING'
    REPLICATION_STOP_FAILED = 'REPLICATION_STOP_FAILED'
    REPLICATION_STOPPED = 'REPLICATION_STOPPED'


class AppReplicationStatusMessage(RootModel[str]):
    root: str


class AppStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    DELETE_FAILED = 'DELETE_FAILED'


class AppStatusMessage(RootModel[str]):
    root: str


class AppValidationStrategy(Enum):
    SSM = 'SSM'


class AssociatePublicIpAddress(RootModel[bool]):
    root: bool


class AutoLaunch(RootModel[bool]):
    root: bool


class BucketName(RootModel[str]):
    root: str


class ClientToken(RootModel[str]):
    root: str


class Command(RootModel[constr(min_length=1, max_length=64000)]):
    root: constr(min_length=1, max_length=64000)


class ConnectorCapability(Enum):
    VSPHERE = 'VSPHERE'
    SCVMM = 'SCVMM'
    HYPERV_MANAGER = 'HYPERV-MANAGER'
    SNAPSHOT_BATCHING = 'SNAPSHOT_BATCHING'
    SMS_OPTIMIZED = 'SMS_OPTIMIZED'


class ConnectorCapabilityList(RootModel[List[ConnectorCapability]]):
    root: List[ConnectorCapability]


class ConnectorId(RootModel[str]):
    root: str


class ConnectorStatus(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'


class ConnectorVersion(RootModel[str]):
    root: str


class DeleteAppLaunchConfigurationRequest(BaseModel):
    appId: Optional[AppId] = None


class DeleteAppLaunchConfigurationResponse(BaseModel):
    pass


class DeleteAppReplicationConfigurationRequest(BaseModel):
    appId: Optional[AppId] = None


class DeleteAppReplicationConfigurationResponse(BaseModel):
    pass


class DeleteAppResponse(BaseModel):
    pass


class DeleteAppValidationConfigurationRequest(BaseModel):
    appId: AppIdWithValidation


class DeleteAppValidationConfigurationResponse(BaseModel):
    pass


class DeleteReplicationJobResponse(BaseModel):
    pass


class DeleteServerCatalogRequest(BaseModel):
    pass


class DeleteServerCatalogResponse(BaseModel):
    pass


class Description(RootModel[str]):
    root: str


class DisassociateConnectorRequest(BaseModel):
    connectorId: ConnectorId


class DisassociateConnectorResponse(BaseModel):
    pass


class DryRunOperationException(RootModel[Any]):
    root: Any


class EC2KeyName(RootModel[str]):
    root: str


class Encrypted(RootModel[bool]):
    root: bool


class ExecutionTimeoutSeconds(RootModel[conint(ge=60, le=28800)]):
    root: conint(ge=60, le=28800)


class ForceStopAppReplication(RootModel[bool]):
    root: bool


class ForceTerminateApp(RootModel[bool]):
    root: bool


class Frequency(RootModel[int]):
    root: int


class GetAppLaunchConfigurationRequest(BaseModel):
    appId: Optional[AppId] = None


class GetAppReplicationConfigurationRequest(BaseModel):
    appId: Optional[AppId] = None


class GetAppRequest(BaseModel):
    appId: Optional[AppId] = None


class GetAppValidationConfigurationRequest(BaseModel):
    appId: AppIdWithValidation


class GetAppValidationOutputRequest(BaseModel):
    appId: AppIdWithValidation


class ImportAppCatalogResponse(BaseModel):
    pass


class ImportServerCatalogRequest(BaseModel):
    pass


class ImportServerCatalogResponse(BaseModel):
    pass


class ImportedAppId(RootModel[str]):
    root: str


class InstanceId(RootModel[constr(pattern=r'(^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)')]):
    root: constr(pattern=r'(^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)')


class InstanceType(RootModel[str]):
    root: str


class InternalError(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class IpAddress(RootModel[str]):
    root: str


class KmsKeyId(RootModel[str]):
    root: str


class LaunchAppRequest(BaseModel):
    appId: Optional[AppId] = None


class LaunchAppResponse(BaseModel):
    pass


class LaunchOrder(RootModel[int]):
    root: int


class LicenseType(Enum):
    AWS = 'AWS'
    BYOL = 'BYOL'


class LogicalId(RootModel[str]):
    root: str


class MacAddress(RootModel[str]):
    root: str


class MaxResults(RootModel[int]):
    root: int


class MissingRequiredParameterException(RootModel[Any]):
    root: Any


class NextToken(RootModel[str]):
    root: str


class NoConnectorsAvailableException(RootModel[Any]):
    root: Any


class NonEmptyStringWithMaxLen255(
    RootModel[constr(pattern=r'^[\S]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[\S]+$', min_length=1, max_length=255)


class NotifyAppValidationOutputResponse(BaseModel):
    pass


class NumberOfRecentAmisToKeep(RootModel[int]):
    root: int


class OperationNotPermittedException(RootModel[Any]):
    root: Any


class OutputFormat(Enum):
    JSON = 'JSON'
    YAML = 'YAML'


class PutAppLaunchConfigurationResponse(BaseModel):
    pass


class PutAppReplicationConfigurationResponse(BaseModel):
    pass


class PutAppValidationConfigurationResponse(BaseModel):
    pass


class ReplicationJobAlreadyExistsException(RootModel[Any]):
    root: Any


class ReplicationJobId(RootModel[str]):
    root: str


class ReplicationJobNotFoundException(RootModel[Any]):
    root: Any


class ReplicationJobState(Enum):
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    FAILED = 'FAILED'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    COMPLETED = 'COMPLETED'
    PAUSED_ON_FAILURE = 'PAUSED_ON_FAILURE'
    FAILING = 'FAILING'


class ReplicationJobStatusMessage(RootModel[str]):
    root: str


class ReplicationJobTerminated(RootModel[bool]):
    root: bool


class ReplicationRunId(RootModel[str]):
    root: str


class ReplicationRunLimitExceededException(RootModel[Any]):
    root: Any


class ReplicationRunStage(RootModel[str]):
    root: str


class ReplicationRunStageProgress(RootModel[str]):
    root: str


class ReplicationRunState(Enum):
    PENDING = 'PENDING'
    MISSED = 'MISSED'
    ACTIVE = 'ACTIVE'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class ReplicationRunStatusMessage(RootModel[str]):
    root: str


class ReplicationRunType(Enum):
    ON_DEMAND = 'ON_DEMAND'
    AUTOMATIC = 'AUTOMATIC'


class RoleName(RootModel[str]):
    root: str


class RunOnce(RootModel[bool]):
    root: bool


class S3BucketName(RootModel[constr(min_length=3, max_length=63)]):
    root: constr(min_length=3, max_length=63)


class S3KeyName(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class S3Location(BaseModel):
    bucket: Optional[S3BucketName] = None
    key: Optional[S3KeyName] = None


class SSMOutput(BaseModel):
    s3Location: Optional[S3Location] = None


class ScriptType(Enum):
    SHELL_SCRIPT = 'SHELL_SCRIPT'
    POWERSHELL_SCRIPT = 'POWERSHELL_SCRIPT'


class SecurityGroup(RootModel[str]):
    root: str


class ServerCannotBeReplicatedException(RootModel[Any]):
    root: Any


class ServerCatalogStatus(Enum):
    NOT_IMPORTED = 'NOT_IMPORTED'
    IMPORTING = 'IMPORTING'
    AVAILABLE = 'AVAILABLE'
    DELETED = 'DELETED'
    EXPIRED = 'EXPIRED'


class ServerGroupId(RootModel[str]):
    root: str


class ServerGroupName(RootModel[str]):
    root: str


class ServerId(RootModel[str]):
    root: str


class ServerType(Enum):
    VIRTUAL_MACHINE = 'VIRTUAL_MACHINE'


class ServerValidationStrategy(Enum):
    USERDATA = 'USERDATA'


class Source(BaseModel):
    s3Location: Optional[S3Location] = None


class StackId(RootModel[str]):
    root: str


class StackName(RootModel[str]):
    root: str


class StartAppReplicationRequest(BaseModel):
    appId: Optional[AppId] = None


class StartAppReplicationResponse(BaseModel):
    pass


class StartOnDemandAppReplicationRequest(BaseModel):
    appId: AppId
    description: Optional[Description] = None


class StartOnDemandAppReplicationResponse(BaseModel):
    pass


class StartOnDemandReplicationRunRequest(BaseModel):
    description: Optional[Description] = None
    replicationJobId: ReplicationJobId


class StartOnDemandReplicationRunResponse(BaseModel):
    replicationRunId: Optional[ReplicationRunId] = None


class StopAppReplicationRequest(BaseModel):
    appId: Optional[AppId] = None


class StopAppReplicationResponse(BaseModel):
    pass


class Subnet(RootModel[str]):
    root: str


class TagKey(RootModel[str]):
    root: str


class TagValue(RootModel[str]):
    root: str


class TemporarilyUnavailableException(RootModel[Any]):
    root: Any


class TerminateAppRequest(BaseModel):
    appId: Optional[AppId] = None


class TerminateAppResponse(BaseModel):
    pass


class Timestamp(RootModel[datetime]):
    root: datetime


class TotalServerGroups(RootModel[int]):
    root: int


class TotalServers(RootModel[int]):
    root: int


class UnauthorizedOperationException(RootModel[Any]):
    root: Any


class UpdateReplicationJobRequest(BaseModel):
    description: Optional[Description] = None
    encrypted: Optional[Encrypted] = None
    frequency: Optional[Frequency] = None
    kmsKeyId: Optional[KmsKeyId] = None
    licenseType: Optional[LicenseType] = None
    nextReplicationRunStartTime: Optional[Timestamp] = None
    numberOfRecentAmisToKeep: Optional[NumberOfRecentAmisToKeep] = None
    replicationJobId: ReplicationJobId
    roleName: Optional[RoleName] = None


class UpdateReplicationJobResponse(BaseModel):
    pass


class UserData(BaseModel):
    s3Location: Optional[S3Location] = None


class UserDataValidationParameters(BaseModel):
    scriptType: Optional[ScriptType] = None
    source: Optional[Source] = None


class VPC(RootModel[str]):
    root: str


class ValidationId(RootModel[constr(pattern=r'^val-[0-9a-f]{17}$')]):
    root: constr(pattern=r'^val-[0-9a-f]{17}$')


class ValidationStatus(Enum):
    READY_FOR_VALIDATION = 'READY_FOR_VALIDATION'
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class ValidationStatusMessage(RootModel[constr(max_length=2500)]):
    root: constr(max_length=2500)


class VmId(RootModel[str]):
    root: str


class VmManagerId(RootModel[str]):
    root: str


class VmManagerName(RootModel[str]):
    root: str


class VmManagerType(Enum):
    VSPHERE = 'VSPHERE'
    SCVMM = 'SCVMM'
    HYPERV_MANAGER = 'HYPERV-MANAGER'


class VmName(RootModel[str]):
    root: str


class VmPath(RootModel[str]):
    root: str


class VmServerAddress(BaseModel):
    vmId: Optional[VmId] = None
    vmManagerId: Optional[VmManagerId] = None


class VmServerAddressList(RootModel[List[VmServerAddress]]):
    root: List[VmServerAddress]


class XAmzTarget(Enum):
    AWSServerMigrationService_V2016_10_24_CreateApp = (
        'AWSServerMigrationService_V2016_10_24.CreateApp'
    )


class XAmzTarget1(Enum):
    AWSServerMigrationService_V2016_10_24_CreateReplicationJob = (
        'AWSServerMigrationService_V2016_10_24.CreateReplicationJob'
    )


class XAmzTarget2(Enum):
    AWSServerMigrationService_V2016_10_24_DeleteApp = (
        'AWSServerMigrationService_V2016_10_24.DeleteApp'
    )


class XAmzTarget3(Enum):
    AWSServerMigrationService_V2016_10_24_DeleteAppLaunchConfiguration = (
        'AWSServerMigrationService_V2016_10_24.DeleteAppLaunchConfiguration'
    )


class XAmzTarget4(Enum):
    AWSServerMigrationService_V2016_10_24_DeleteAppReplicationConfiguration = (
        'AWSServerMigrationService_V2016_10_24.DeleteAppReplicationConfiguration'
    )


class XAmzTarget5(Enum):
    AWSServerMigrationService_V2016_10_24_DeleteAppValidationConfiguration = (
        'AWSServerMigrationService_V2016_10_24.DeleteAppValidationConfiguration'
    )


class XAmzTarget6(Enum):
    AWSServerMigrationService_V2016_10_24_DeleteReplicationJob = (
        'AWSServerMigrationService_V2016_10_24.DeleteReplicationJob'
    )


class XAmzTarget7(Enum):
    AWSServerMigrationService_V2016_10_24_DeleteServerCatalog = (
        'AWSServerMigrationService_V2016_10_24.DeleteServerCatalog'
    )


class XAmzTarget8(Enum):
    AWSServerMigrationService_V2016_10_24_DisassociateConnector = (
        'AWSServerMigrationService_V2016_10_24.DisassociateConnector'
    )


class XAmzTarget9(Enum):
    AWSServerMigrationService_V2016_10_24_GenerateChangeSet = (
        'AWSServerMigrationService_V2016_10_24.GenerateChangeSet'
    )


class XAmzTarget10(Enum):
    AWSServerMigrationService_V2016_10_24_GenerateTemplate = (
        'AWSServerMigrationService_V2016_10_24.GenerateTemplate'
    )


class XAmzTarget11(Enum):
    AWSServerMigrationService_V2016_10_24_GetApp = (
        'AWSServerMigrationService_V2016_10_24.GetApp'
    )


class XAmzTarget12(Enum):
    AWSServerMigrationService_V2016_10_24_GetAppLaunchConfiguration = (
        'AWSServerMigrationService_V2016_10_24.GetAppLaunchConfiguration'
    )


class XAmzTarget13(Enum):
    AWSServerMigrationService_V2016_10_24_GetAppReplicationConfiguration = (
        'AWSServerMigrationService_V2016_10_24.GetAppReplicationConfiguration'
    )


class XAmzTarget14(Enum):
    AWSServerMigrationService_V2016_10_24_GetAppValidationConfiguration = (
        'AWSServerMigrationService_V2016_10_24.GetAppValidationConfiguration'
    )


class XAmzTarget15(Enum):
    AWSServerMigrationService_V2016_10_24_GetAppValidationOutput = (
        'AWSServerMigrationService_V2016_10_24.GetAppValidationOutput'
    )


class XAmzTarget16(Enum):
    AWSServerMigrationService_V2016_10_24_GetConnectors = (
        'AWSServerMigrationService_V2016_10_24.GetConnectors'
    )


class XAmzTarget17(Enum):
    AWSServerMigrationService_V2016_10_24_GetReplicationJobs = (
        'AWSServerMigrationService_V2016_10_24.GetReplicationJobs'
    )


class XAmzTarget18(Enum):
    AWSServerMigrationService_V2016_10_24_GetReplicationRuns = (
        'AWSServerMigrationService_V2016_10_24.GetReplicationRuns'
    )


class XAmzTarget19(Enum):
    AWSServerMigrationService_V2016_10_24_GetServers = (
        'AWSServerMigrationService_V2016_10_24.GetServers'
    )


class XAmzTarget20(Enum):
    AWSServerMigrationService_V2016_10_24_ImportAppCatalog = (
        'AWSServerMigrationService_V2016_10_24.ImportAppCatalog'
    )


class XAmzTarget21(Enum):
    AWSServerMigrationService_V2016_10_24_ImportServerCatalog = (
        'AWSServerMigrationService_V2016_10_24.ImportServerCatalog'
    )


class XAmzTarget22(Enum):
    AWSServerMigrationService_V2016_10_24_LaunchApp = (
        'AWSServerMigrationService_V2016_10_24.LaunchApp'
    )


class XAmzTarget23(Enum):
    AWSServerMigrationService_V2016_10_24_ListApps = (
        'AWSServerMigrationService_V2016_10_24.ListApps'
    )


class XAmzTarget24(Enum):
    AWSServerMigrationService_V2016_10_24_NotifyAppValidationOutput = (
        'AWSServerMigrationService_V2016_10_24.NotifyAppValidationOutput'
    )


class XAmzTarget25(Enum):
    AWSServerMigrationService_V2016_10_24_PutAppLaunchConfiguration = (
        'AWSServerMigrationService_V2016_10_24.PutAppLaunchConfiguration'
    )


class XAmzTarget26(Enum):
    AWSServerMigrationService_V2016_10_24_PutAppReplicationConfiguration = (
        'AWSServerMigrationService_V2016_10_24.PutAppReplicationConfiguration'
    )


class XAmzTarget27(Enum):
    AWSServerMigrationService_V2016_10_24_PutAppValidationConfiguration = (
        'AWSServerMigrationService_V2016_10_24.PutAppValidationConfiguration'
    )


class XAmzTarget28(Enum):
    AWSServerMigrationService_V2016_10_24_StartAppReplication = (
        'AWSServerMigrationService_V2016_10_24.StartAppReplication'
    )


class XAmzTarget29(Enum):
    AWSServerMigrationService_V2016_10_24_StartOnDemandAppReplication = (
        'AWSServerMigrationService_V2016_10_24.StartOnDemandAppReplication'
    )


class XAmzTarget30(Enum):
    AWSServerMigrationService_V2016_10_24_StartOnDemandReplicationRun = (
        'AWSServerMigrationService_V2016_10_24.StartOnDemandReplicationRun'
    )


class XAmzTarget31(Enum):
    AWSServerMigrationService_V2016_10_24_StopAppReplication = (
        'AWSServerMigrationService_V2016_10_24.StopAppReplication'
    )


class XAmzTarget32(Enum):
    AWSServerMigrationService_V2016_10_24_TerminateApp = (
        'AWSServerMigrationService_V2016_10_24.TerminateApp'
    )


class XAmzTarget33(Enum):
    AWSServerMigrationService_V2016_10_24_UpdateApp = (
        'AWSServerMigrationService_V2016_10_24.UpdateApp'
    )


class XAmzTarget34(Enum):
    AWSServerMigrationService_V2016_10_24_UpdateReplicationJob = (
        'AWSServerMigrationService_V2016_10_24.UpdateReplicationJob'
    )


class AppValidationOutput(BaseModel):
    ssmOutput: Optional[SSMOutput] = None


class Connector(BaseModel):
    associatedOn: Optional[Timestamp] = None
    capabilityList: Optional[ConnectorCapabilityList] = None
    connectorId: Optional[ConnectorId] = None
    ipAddress: Optional[IpAddress] = None
    macAddress: Optional[MacAddress] = None
    status: Optional[ConnectorStatus] = None
    version: Optional[ConnectorVersion] = None
    vmManagerId: Optional[VmManagerId] = None
    vmManagerName: Optional[VmManagerName] = None
    vmManagerType: Optional[VmManagerType] = None


class ConnectorList(RootModel[List[Connector]]):
    root: List[Connector]


class CreateReplicationJobRequest(BaseModel):
    description: Optional[Description] = None
    encrypted: Optional[Encrypted] = None
    frequency: Optional[Frequency] = None
    kmsKeyId: Optional[KmsKeyId] = None
    licenseType: Optional[LicenseType] = None
    numberOfRecentAmisToKeep: Optional[NumberOfRecentAmisToKeep] = None
    roleName: Optional[RoleName] = None
    runOnce: Optional[RunOnce] = None
    seedReplicationTime: Timestamp
    serverId: ServerId


class CreateReplicationJobResponse(BaseModel):
    replicationJobId: Optional[ReplicationJobId] = None


class DeleteAppRequest(BaseModel):
    appId: Optional[AppId] = None
    forceStopAppReplication: Optional[ForceStopAppReplication] = None
    forceTerminateApp: Optional[ForceTerminateApp] = None


class DeleteReplicationJobRequest(BaseModel):
    replicationJobId: ReplicationJobId


class GenerateChangeSetRequest(BaseModel):
    appId: Optional[AppId] = None
    changesetFormat: Optional[OutputFormat] = None


class GenerateChangeSetResponse(BaseModel):
    s3Location: Optional[S3Location] = None


class GenerateTemplateRequest(BaseModel):
    appId: Optional[AppId] = None
    templateFormat: Optional[OutputFormat] = None


class GenerateTemplateResponse(BaseModel):
    s3Location: Optional[S3Location] = None


class GetConnectorsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class GetConnectorsResponse(BaseModel):
    connectorList: Optional[ConnectorList] = None
    nextToken: Optional[NextToken] = None


class GetReplicationJobsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    replicationJobId: Optional[ReplicationJobId] = None


class GetReplicationRunsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    replicationJobId: ReplicationJobId


class GetServersRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    vmServerAddressList: Optional[VmServerAddressList] = None


class ImportAppCatalogRequest(BaseModel):
    roleName: Optional[RoleName] = None


class LaunchDetails(BaseModel):
    latestLaunchTime: Optional[Timestamp] = None
    stackId: Optional[StackId] = None
    stackName: Optional[StackName] = None


class ListAppsRequest(BaseModel):
    appIds: Optional[AppIds] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class NotificationContext(BaseModel):
    status: Optional[ValidationStatus] = None
    statusMessage: Optional[ValidationStatusMessage] = None
    validationId: Optional[ValidationId] = None


class NotifyAppValidationOutputRequest(BaseModel):
    appId: AppIdWithValidation
    notificationContext: Optional[NotificationContext] = None


class ReplicationRunStageDetails(BaseModel):
    stage: Optional[ReplicationRunStage] = None
    stageProgress: Optional[ReplicationRunStageProgress] = None


class SSMValidationParameters(BaseModel):
    command: Optional[Command] = None
    executionTimeoutSeconds: Optional[ExecutionTimeoutSeconds] = None
    instanceId: Optional[InstanceId] = None
    outputS3BucketName: Optional[BucketName] = None
    scriptType: Optional[ScriptType] = None
    source: Optional[Source] = None


class ServerReplicationParameters(BaseModel):
    encrypted: Optional[Encrypted] = None
    frequency: Optional[Frequency] = None
    kmsKeyId: Optional[KmsKeyId] = None
    licenseType: Optional[LicenseType] = None
    numberOfRecentAmisToKeep: Optional[NumberOfRecentAmisToKeep] = None
    runOnce: Optional[RunOnce] = None
    seedTime: Optional[Timestamp] = None


class Tag(BaseModel):
    key: Optional[TagKey] = None
    value: Optional[TagValue] = None


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class VmServer(BaseModel):
    vmManagerName: Optional[VmManagerName] = None
    vmManagerType: Optional[VmManagerType] = None
    vmName: Optional[VmName] = None
    vmPath: Optional[VmPath] = None
    vmServerAddress: Optional[VmServerAddress] = None


class AppSummary(BaseModel):
    appId: Optional[AppId] = None
    creationTime: Optional[Timestamp] = None
    description: Optional[AppDescription] = None
    importedAppId: Optional[ImportedAppId] = None
    lastModified: Optional[Timestamp] = None
    latestReplicationTime: Optional[Timestamp] = None
    launchConfigurationStatus: Optional[AppLaunchConfigurationStatus] = None
    launchDetails: Optional[LaunchDetails] = None
    launchStatus: Optional[AppLaunchStatus] = None
    launchStatusMessage: Optional[AppLaunchStatusMessage] = None
    name: Optional[AppName] = None
    replicationConfigurationStatus: Optional[AppReplicationConfigurationStatus] = None
    replicationStatus: Optional[AppReplicationStatus] = None
    replicationStatusMessage: Optional[AppReplicationStatusMessage] = None
    roleName: Optional[RoleName] = None
    status: Optional[AppStatus] = None
    statusMessage: Optional[AppStatusMessage] = None
    totalServerGroups: Optional[TotalServerGroups] = None
    totalServers: Optional[TotalServers] = None


class AppValidationConfiguration(BaseModel):
    appValidationStrategy: Optional[AppValidationStrategy] = None
    name: Optional[NonEmptyStringWithMaxLen255] = None
    ssmValidationParameters: Optional[SSMValidationParameters] = None
    validationId: Optional[ValidationId] = None


class AppValidationConfigurations(RootModel[List[AppValidationConfiguration]]):
    root: List[AppValidationConfiguration]


class Apps(RootModel[List[AppSummary]]):
    root: List[AppSummary]


class ListAppsResponse(BaseModel):
    apps: Optional[Apps] = None
    nextToken: Optional[NextToken] = None


class ReplicationRun(BaseModel):
    amiId: Optional[AmiId] = None
    completedTime: Optional[Timestamp] = None
    description: Optional[Description] = None
    encrypted: Optional[Encrypted] = None
    kmsKeyId: Optional[KmsKeyId] = None
    replicationRunId: Optional[ReplicationRunId] = None
    scheduledStartTime: Optional[Timestamp] = None
    stageDetails: Optional[ReplicationRunStageDetails] = None
    state: Optional[ReplicationRunState] = None
    statusMessage: Optional[ReplicationRunStatusMessage] = None
    type: Optional[ReplicationRunType] = None


class ReplicationRunList(RootModel[List[ReplicationRun]]):
    root: List[ReplicationRun]


class Server(BaseModel):
    replicationJobId: Optional[ReplicationJobId] = None
    replicationJobTerminated: Optional[ReplicationJobTerminated] = None
    serverId: Optional[ServerId] = None
    serverType: Optional[ServerType] = None
    vmServer: Optional[VmServer] = None


class ServerLaunchConfiguration(BaseModel):
    associatePublicIpAddress: Optional[AssociatePublicIpAddress] = None
    configureScript: Optional[S3Location] = None
    configureScriptType: Optional[ScriptType] = None
    ec2KeyName: Optional[EC2KeyName] = None
    iamInstanceProfileName: Optional[RoleName] = None
    instanceType: Optional[InstanceType] = None
    logicalId: Optional[LogicalId] = None
    securityGroup: Optional[SecurityGroup] = None
    server: Optional[Server] = None
    subnet: Optional[Subnet] = None
    userData: Optional[UserData] = None
    vpc: Optional[VPC] = None


class ServerLaunchConfigurations(RootModel[List[ServerLaunchConfiguration]]):
    root: List[ServerLaunchConfiguration]


class ServerList(RootModel[List[Server]]):
    root: List[Server]


class ServerReplicationConfiguration(BaseModel):
    server: Optional[Server] = None
    serverReplicationParameters: Optional[ServerReplicationParameters] = None


class ServerReplicationConfigurations(RootModel[List[ServerReplicationConfiguration]]):
    root: List[ServerReplicationConfiguration]


class ServerValidationConfiguration(BaseModel):
    name: Optional[NonEmptyStringWithMaxLen255] = None
    server: Optional[Server] = None
    serverValidationStrategy: Optional[ServerValidationStrategy] = None
    userDataValidationParameters: Optional[UserDataValidationParameters] = None
    validationId: Optional[ValidationId] = None


class ServerValidationConfigurations(RootModel[List[ServerValidationConfiguration]]):
    root: List[ServerValidationConfiguration]


class ServerValidationOutput(BaseModel):
    server: Optional[Server] = None


class ValidationOutput(BaseModel):
    appValidationOutput: Optional[AppValidationOutput] = None
    latestValidationTime: Optional[Timestamp] = None
    name: Optional[NonEmptyStringWithMaxLen255] = None
    serverValidationOutput: Optional[ServerValidationOutput] = None
    status: Optional[ValidationStatus] = None
    statusMessage: Optional[ValidationStatusMessage] = None
    validationId: Optional[ValidationId] = None


class ValidationOutputList(RootModel[List[ValidationOutput]]):
    root: List[ValidationOutput]


class GetAppValidationOutputResponse(BaseModel):
    validationOutputList: Optional[ValidationOutputList] = None


class GetServersResponse(BaseModel):
    lastModifiedOn: Optional[Timestamp] = None
    nextToken: Optional[NextToken] = None
    serverCatalogStatus: Optional[ServerCatalogStatus] = None
    serverList: Optional[ServerList] = None


class ReplicationJob(BaseModel):
    description: Optional[Description] = None
    encrypted: Optional[Encrypted] = None
    frequency: Optional[Frequency] = None
    kmsKeyId: Optional[KmsKeyId] = None
    latestAmiId: Optional[AmiId] = None
    licenseType: Optional[LicenseType] = None
    nextReplicationRunStartTime: Optional[Timestamp] = None
    numberOfRecentAmisToKeep: Optional[NumberOfRecentAmisToKeep] = None
    replicationJobId: Optional[ReplicationJobId] = None
    replicationRunList: Optional[ReplicationRunList] = None
    roleName: Optional[RoleName] = None
    runOnce: Optional[RunOnce] = None
    seedReplicationTime: Optional[Timestamp] = None
    serverId: Optional[ServerId] = None
    serverType: Optional[ServerType] = None
    state: Optional[ReplicationJobState] = None
    statusMessage: Optional[ReplicationJobStatusMessage] = None
    vmServer: Optional[VmServer] = None


class ReplicationJobList(RootModel[List[ReplicationJob]]):
    root: List[ReplicationJob]


class ServerGroup(BaseModel):
    name: Optional[ServerGroupName] = None
    serverGroupId: Optional[ServerGroupId] = None
    serverList: Optional[ServerList] = None


class ServerGroupLaunchConfiguration(BaseModel):
    launchOrder: Optional[LaunchOrder] = None
    serverGroupId: Optional[ServerGroupId] = None
    serverLaunchConfigurations: Optional[ServerLaunchConfigurations] = None


class ServerGroupLaunchConfigurations(RootModel[List[ServerGroupLaunchConfiguration]]):
    root: List[ServerGroupLaunchConfiguration]


class ServerGroupReplicationConfiguration(BaseModel):
    serverGroupId: Optional[ServerGroupId] = None
    serverReplicationConfigurations: Optional[ServerReplicationConfigurations] = None


class ServerGroupReplicationConfigurations(
    RootModel[List[ServerGroupReplicationConfiguration]]
):
    root: List[ServerGroupReplicationConfiguration]


class ServerGroupValidationConfiguration(BaseModel):
    serverGroupId: Optional[ServerGroupId] = None
    serverValidationConfigurations: Optional[ServerValidationConfigurations] = None


class ServerGroupValidationConfigurations(
    RootModel[List[ServerGroupValidationConfiguration]]
):
    root: List[ServerGroupValidationConfiguration]


class ServerGroups(RootModel[List[ServerGroup]]):
    root: List[ServerGroup]


class UpdateAppRequest(BaseModel):
    appId: Optional[AppId] = None
    description: Optional[AppDescription] = None
    name: Optional[AppName] = None
    roleName: Optional[RoleName] = None
    serverGroups: Optional[ServerGroups] = None
    tags: Optional[Tags] = None


class UpdateAppResponse(BaseModel):
    appSummary: Optional[AppSummary] = None
    serverGroups: Optional[ServerGroups] = None
    tags: Optional[Tags] = None


class CreateAppRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    description: Optional[AppDescription] = None
    name: Optional[AppName] = None
    roleName: Optional[RoleName] = None
    serverGroups: Optional[ServerGroups] = None
    tags: Optional[Tags] = None


class CreateAppResponse(BaseModel):
    appSummary: Optional[AppSummary] = None
    serverGroups: Optional[ServerGroups] = None
    tags: Optional[Tags] = None


class GetAppLaunchConfigurationResponse(BaseModel):
    appId: Optional[AppId] = None
    autoLaunch: Optional[AutoLaunch] = None
    roleName: Optional[RoleName] = None
    serverGroupLaunchConfigurations: Optional[ServerGroupLaunchConfigurations] = None


class GetAppReplicationConfigurationResponse(BaseModel):
    serverGroupReplicationConfigurations: Optional[
        ServerGroupReplicationConfigurations
    ] = None


class GetAppResponse(BaseModel):
    appSummary: Optional[AppSummary] = None
    serverGroups: Optional[ServerGroups] = None
    tags: Optional[Tags] = None


class GetAppValidationConfigurationResponse(BaseModel):
    appValidationConfigurations: Optional[AppValidationConfigurations] = None
    serverGroupValidationConfigurations: Optional[
        ServerGroupValidationConfigurations
    ] = None


class GetReplicationJobsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    replicationJobList: Optional[ReplicationJobList] = None


class GetReplicationRunsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    replicationJob: Optional[ReplicationJob] = None
    replicationRunList: Optional[ReplicationRunList] = None


class PutAppLaunchConfigurationRequest(BaseModel):
    appId: Optional[AppId] = None
    autoLaunch: Optional[AutoLaunch] = None
    roleName: Optional[RoleName] = None
    serverGroupLaunchConfigurations: Optional[ServerGroupLaunchConfigurations] = None


class PutAppReplicationConfigurationRequest(BaseModel):
    appId: Optional[AppId] = None
    serverGroupReplicationConfigurations: Optional[
        ServerGroupReplicationConfigurations
    ] = None


class PutAppValidationConfigurationRequest(BaseModel):
    appId: AppIdWithValidation
    appValidationConfigurations: Optional[AppValidationConfigurations] = None
    serverGroupValidationConfigurations: Optional[
        ServerGroupValidationConfigurations
    ] = None
